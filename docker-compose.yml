version: '3'
services:
  backend:
    restart: always
    image: ghcr.io/zercurity/backend:latest
    hostname: backend.$ZERCURITY_DOMAIN
    env_file:
    - /var/lib/zercurity/production.env
    links:
    - postgres
    depends_on:
    - migrations
    - scheduler
    networks:
    - zercurity
    volumes:
    - certs:/var/task/run/libs/resources/certs
    - backend:/tmp/zercurity
    - type: volume
      source: secrets
      target: /opt/secrets
      read_only: true
  frontend:
    restart: always
    image: ghcr.io/zercurity/frontend:latest
    hostname: frontend.$ZERCURITY_DOMAIN
    env_file:
    - /var/lib/zercurity/production.env
    networks:
    - zercurity
  postgres:
    restart: always
    image: ghcr.io/zercurity/postgres:latest
    environment:
    - POSTGRES_USER=$DB_USERNAME
    - POSTGRES_PASSWORD=$DB_PASSWORD
    - POSTGRES_DB=$DB_DATABASE
    - PGDATA=/var/lib/postgresql/data/zercurity
    hostname: postgres.$ZERCURITY_DOMAIN
    env_file:
    - /var/lib/zercurity/production.env
    volumes:
    - postgres:/var/lib/postgresql/data
    networks:
    - zercurity
  postgres_exporter:
    restart: on-failure
    image: ghcr.io/zercurity/postgres_exporter:latest
    hostname: postgres_exporter.$ZERCURITY_DOMAIN
    environment:
    - DATA_SOURCE_URI=postgres?sslmode=disable
    - DATA_SOURCE_USER=$DB_USERNAME
    - DATA_SOURCE_PASS=$DB_PASSWORD
    networks:
    - zercurity
    links:
    - postgres
    depends_on:
    - postgres
  nginx:
    restart: always
    image: ghcr.io/zercurity/nginx:latest
    hostname: $ZERCURITY_DOMAIN
    env_file:
    - /var/lib/zercurity/production.env
    ports:
    - "80:80"
    - "443:443"
    links:
    - backend
    - frontend
    depends_on:
    - backend
    - frontend
    networks:
      zercurity:
          aliases:
          - download.$ZERCURITY_DOMAIN
          - nginx.$ZERCURITY_DOMAIN
          - app.$ZERCURITY_DOMAIN
          - api.$ZERCURITY_DOMAIN
          - grafana.$ZERCURITY_DOMAIN
    volumes:
    - certs:/etc/ssl/$ZERCURITY_DOMAIN
    - type: volume
      source: backend
      target: /usr/share/nginx/html/backend
      read_only: true
  migrations:
    restart: on-failure
    image: ghcr.io/zercurity/migrations:latest
    hostname: migrations.$ZERCURITY_DOMAIN
    env_file:
    - /var/lib/zercurity/production.env
    links:
    - postgres
    depends_on:
    - postgres
    networks:
    - zercurity
  scheduler:
    restart: on-failure
    image: ghcr.io/zercurity/scheduler:latest
    hostname: scheduler.$ZERCURITY_DOMAIN
    env_file:
    - /var/lib/zercurity/production.env
    depends_on:
    - redis
    networks:
    - zercurity
    volumes:
    - certs:/var/task/run/libs/resources/certs
    - type: volume
      source: backend
      target: /tmp/zercurity
      read_only: true
  workers:
    restart: on-failure
    image: ghcr.io/zercurity/workers:latest
    hostname: workers.$ZERCURITY_DOMAIN
    env_file:
    - /var/lib/zercurity/production.env
    deploy:
      mode: replicated
      replicas: 3
    depends_on:
    - scheduler
    networks:
    - zercurity
    volumes:
    - certs:/var/task/run/libs/resources/certs
    - type: volume
      source: backend
      target: /tmp/zercurity
      read_only: true  
  steampipe:
    restart: on-failure
    image: ghcr.io/zercurity/steampipe:latest
    hostname: steampipe.$ZERCURITY_DOMAIN
    env_file:
    - /var/lib/zercurity/production.env
    links:
    - redis
    depends_on:
    - redis
    networks:
    - zercurity
  # https://hub.docker.com/r/namshi/smtp/
  # Provides support for SES, GMail etc as an email forwarder
  mailer:
    restart: on-failure
    image: ghcr.io/zercurity/mailer:latest
    hostname: mailer.$ZERCURITY_DOMAIN
    env_file:
      - /var/lib/zercurity/production.env
    networks:
    - zercurity
  redis:
    restart: on-failure
    image: ghcr.io/zercurity/redis:latest
    hostname: redis.$ZERCURITY_DOMAIN
    env_file:
      - /var/lib/zercurity/production.env
    networks:
    - zercurity
  prometheus:
    restart: on-failure
    image: ghcr.io/zercurity/prometheus:latest
    hostname: prometheus.$ZERCURITY_DOMAIN
    links:
    - postgres_exporter
    - nginx
    networks:
    - zercurity
    volumes:
    - prometheus:/prometheus-data
  grafana:
    restart: on-failure
    image: ghcr.io/zercurity/grafana:latest
    hostname: grafana.$ZERCURITY_DOMAIN
    links:
    - prometheus
    depends_on:
    - prometheus
    environment:
    - GF_SERVER_ROOT_URL=https://grafana.$ZERCURITY_DOMAIN
    - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-zercurity}
    networks:
    - zercurity
networks:
  zercurity:
volumes:
  certs:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: /var/lib/zercurity/certs/$ZERCURITY_DOMAIN
  secrets:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: /var/lib/zercurity/secrets/$ZERCURITY_DOMAIN
  backend:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: /var/lib/zercurity/data/backend
  postgres:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: /var/lib/zercurity/data/postgres
  prometheus:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: /var/lib/zercurity/data/prometheus
  grafana:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: /var/lib/zercurity/data/grafana
